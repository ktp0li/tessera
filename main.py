import asyncio
import os
import logging
from sqlalchemy import Column, Integer, ForeignKey, String, create_engine
from sqlalchemy.orm import declarative_base
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext

engine = create_engine('postgresql://postgres:example@localhost:8080/postgres')
Base = declarative_base()

# –ú–æ–¥–µ–ª–∏ –¥–≤—É—Ö —Ç–∞–±–ª–∏—Ü –ë–î
class Users(Base):
    __tablename__ = 'users'
    user_id = Column(Integer, primary_key=True)

class Passwords(Base):
    __tablename__ = 'passwords'
    id = Column(Integer, primary_key=True)
    service = Column(String(100))
    password = Column(String(100))
    user_id = Column(ForeignKey('users.user_id'))

Base.metadata.create_all(engine)

bot = Bot(token=os.getenv('TOKEN'))
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

# –°—Ç–µ–π—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /set
class Set(StatesGroup):
    service = State()
    password = State()

# C—Ç–µ–π—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /get
class Get(StatesGroup):
    service = State()

# C—Ç–µ–π—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /get
class Del(StatesGroup):
    service = State()


@dp.message_handler(commands=['start', 'help'])
async def cmd_start(message: types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç!üëã –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞–∂–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–ºüîí' +
                        '\n–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥:\n/set ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å' +
                        '\n/get ‚Äì –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª—å –∫ —Å–µ—Ä–≤–∏—Å—É\n/del ‚Äì —É–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–∏—Å')


@dp.message_handler(commands=['set'])
async def cmd_set(message: types.Message):
    await Set.service.set()
    await message.answer('–ö–∞–∫–æ–π —Å–µ—Ä–≤–∏—Å —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å?üò≥' + f'\nid: {message.from_user.id}')

# –í–≤–æ–¥ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è /set
@dp.message_handler(state=Set.service)
async def set_service(message: types.Message, state: FSMContext):
    await Set.password.set()
    async with state.proxy() as data:
        data['service'] = message.text
    await message.answer('–í–≤–æ–¥–∏ –ø–∞—Ä–æ–ª—å. –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —è –Ω–µ –ø–æ–¥–≥–ª—è–¥—ã–≤–∞—éüòâ')

# –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è –¥–ª—è /set
@dp.message_handler(state=Set.password)
async def set_password(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        service = data['service']
    await message.answer(f'–Ø —Å–ª–∏–ª –≤—Å—ë –∫–æ–ø–∞–º. –°–µ—Ä–≤–∏—Å: {service}, –ø–∞—Ä–æ–ª—å: {message.text}\n' +
                        '–°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º —Å–µ–π—á–∞—Å —É–¥–∞–ª–∏—Ç—Å—è. ' +
                        '–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —ç—Ç–æ –≤—Å—ë —Ä–∞–¥–∏ —Ç–≤–æ–µ–π –∂–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω–∏—Ü–∞–ª—å–Ω–æ—Å—Ç–∏üòé')
    await state.finish()
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await asyncio.sleep(2)
    await message.delete()


@dp.message_handler(commands=['get'])
async def cmd_get(message: types.Message):
    await Get.service.set()
    await message.answer('–ü–∞—Ä–æ–ª—å –æ—Ç –∫–∞–∫–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–∫–∞–∑–∞—Ç—å?ü•∞')

# –í–≤–æ–¥ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è /get
@dp.message_handler(state=Get.service)
async def get_service(message: types.Message, state: FSMContext):
    service = message.text
    await state.finish()
    answer = await message.answer(f'–ü–∞—Ä–æ–ª—å –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ {service} —ç—ç—ç... –±—É–¥–µ—Ç')
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await asyncio.sleep(5)
    await answer.delete()


@dp.message_handler(commands=['del'])
async def cmd_del(message: types.Message):
    await Del.service.set()
    await message.answer('–ö–∞–∫–æ–π —Å–µ—Ä–≤–∏—Å —É–¥–∞–ª—è–µ–º?üò≠')

# –í–≤–æ–¥ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è /del
@dp.message_handler(state=Del.service)
async def del_service(message: types.Message, state: FSMContext):
    service = message.text
    await state.finish()
    await message.answer(f'–°–µ—Ä–≤–∏—Å {service} —É–¥–∞–ª—ë–Ωü´•')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
