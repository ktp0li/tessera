import asyncio
import os
import logging
from sqlalchemy import Column, Integer, ForeignKey, String, create_engine, LargeBinary
from sqlalchemy.orm import declarative_base, sessionmaker
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from Crypto.Cipher import AES

dbuser, dbpass, dbhost = os.getenv("DB_USER"), os.getenv("DB_PASS"), os.getenv("DB_HOST")
dbport, dbname = os.getenv("DB_PORT"), os.getenv("DB_NAME")
engine = create_engine(f'postgresql://{dbname}:{dbpass}@{dbhost}:{dbport}/{dbname}')
Base = declarative_base()
Base.metadata.bind = engine
DBSession = sessionmaker(bind=engine)
session = DBSession()

# –ú–æ–¥–µ–ª–∏ –¥–≤—É—Ö —Ç–∞–±–ª–∏—Ü –ë–î
class Users(Base):
    __tablename__ = 'users'
    user_id = Column(Integer, primary_key=True)

class Passwords(Base):
    __tablename__ = 'passwords'
    id = Column(Integer, primary_key=True)
    service = Column(String(63))
    login = Column(String(63))
    #password = Column(String(63))
    ciphertext = Column(LargeBinary(63))
    tag = Column(LargeBinary(16))
    nonce = Column(LargeBinary(16))
    user_id = Column(ForeignKey('users.user_id'))

bot = Bot(token=os.getenv('TOKEN'))
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

# –°—Ç–µ–π—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /set
class Set(StatesGroup):
    service = State()
    login = State()
    password = State()

# C—Ç–µ–π—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /get
class Get(StatesGroup):
    service = State()
    login = State()

# C—Ç–µ–π—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /get
class Del(StatesGroup):
    service = State()
    login = State()


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∏—Ñ—Ä–∞
key = os.getenv('KEY').encode()

# –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
async def encode(data):
    data = data.encode()
    cipher = AES.new(key, AES.MODE_EAX)
    ciphertext, tag = cipher.encrypt_and_digest(data)
    nonce = cipher.nonce
    return {'ciphertext': ciphertext, 'tag': tag, 'nonce': nonce}

# –î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
async def decode(ciphertext, tag, nonce):
    cipher = AES.new(key, AES.MODE_EAX, nonce)
    return cipher.decrypt_and_verify(ciphertext, tag)


@dp.message_handler(commands=['start', 'help'])
async def cmd_start(message: types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞–∂–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º üîí' +
                        '\n–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥:\n/set ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å' +
                        '\n/get ‚Äì –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª—å –∫ —Å–µ—Ä–≤–∏—Å—É\n/del ‚Äì —É–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–∏—Å' +
                        '\n/list ‚Äì —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤')


@dp.message_handler(commands=['set'])
async def cmd_set(message: types.Message):
    await Set.service.set()
    await message.answer('–ö–∞–∫–æ–π —Å–µ—Ä–≤–∏—Å —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å? üò≥')

# –í–≤–æ–¥ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è /set
@dp.message_handler(state=Set.service)
async def set_service(message: types.Message, state: FSMContext):
    service = message.text
    if len(service) <= 63:
        async with state.proxy() as data:
            data['service'] = service

        await Set.login.set()
        await message.answer('–ö–∞–∫–æ–π –ª–æ–≥–∏–Ω –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –¥–æ–±–∞–≤–∏—à—å? ü§î')
    else:
        await state.finish()
        await message.answer('–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ü•∫' +
                            '\n–í–≤–µ–¥–∏ /set —Å–Ω–æ–≤–∞')

# –í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞ –¥–ª—è /set
@dp.message_handler(state=Set.login)
async def set_login(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    log = message.text

    if len(log) <= 63:
        async with state.proxy() as data:
            data['login'] = log
            service = data['service']

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ –ª–æ–≥–∏–Ω–µ –≤ –±–¥
        if not session.query(Passwords).filter_by(user_id=user_id, service=service, login=log).first():
            await Set.password.set()
            await message.answer('–í–≤–æ–¥–∏ –ø–∞—Ä–æ–ª—å. –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —è –Ω–µ –ø–æ–¥–≥–ª—è–¥—ã–≤–∞—é üòâ')
        else:
            state.finish()
            await message.answer('–¢—ã —É–∂–µ –¥–æ–±–∞–≤–ª—è–ª —ç—Ç–æ—Ç –ª–æ–≥–∏–Ω –∫ —Å–µ—Ä–≤–∏—Å—É ü•∫' +
                                 '\n–í–≤–µ–¥–∏ /set —Å–Ω–æ–≤–∞')
    else:
        await state.finish()
        await message.answer('–õ–æ–≥–∏–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ü•∫' +
                             '\n–í–≤–µ–¥–∏ /set —Å–Ω–æ–≤–∞')

# –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è –¥–ª—è /set
@dp.message_handler(state=Set.password)
async def set_password(message: types.Message, state: FSMContext):
    passw = message.text

    if len(passw) <= 63:
        async with state.proxy() as data:
            service = data['service']
            log = data['login']

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —é–∑–µ—Ä–∞ –≤ –±–¥
        user_id = message.from_user.id
        if not session.query(Users).filter_by(user_id=user_id).first():
            user = Users(user_id=user_id)
            session.add(user)
            session.commit()

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Å–µ—Ä–≤–∏—Å–µ
        encoded = await encode(passw)
        password = Passwords(service=service, login=log, ciphertext=encoded['ciphertext'],
                             tag=encoded['tag'], nonce=encoded['nonce'], user_id=user_id)
        session.add(password)
        session.commit()

        await message.answer('–°–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n' +
                            '–°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º —Å–µ–π—á–∞—Å —É–¥–∞–ª–∏—Ç—Å—è. ' +
                            '–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —ç—Ç–æ —Ä–∞–¥–∏ —Ç–≤–æ–µ–π –∂–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ üòé')
        await state.finish()
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await asyncio.sleep(2)
        await message.delete()
    else:
        await state.finish()
        await message.answer('–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ü•∫' +
                             '\n–í–≤–µ–¥–∏ /set —Å–Ω–æ–≤–∞')



@dp.message_handler(commands=['get'])
async def cmd_get(message: types.Message):
    await Get.service.set()
    await message.answer('–ü–∞—Ä–æ–ª—å –æ—Ç –∫–∞–∫–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–∫–∞–∑–∞—Ç—å? ü•∞')

# –í–≤–æ–¥ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è /get
@dp.message_handler(state=Get.service)
async def get_service(message: types.Message, state: FSMContext):
    service = message.text
    async with state.proxy() as data:
        data['service'] = service
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –ø–∞—Ä–æ–ª–µ
    entry = session.query(Passwords).filter_by(service=service, user_id=user_id).first()
    if entry:
        await message.answer('–ö–∞–∫–æ–π –ª–æ–≥–∏–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏? üò≥')
        await Get.login.set()
    else:
        await message.answer('–°–µ—Ä–≤–∏—Å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, —Å–ø–µ—Ä–≤–∞ –¥–æ–±–∞–≤—å –µ–≥–æ —á–µ—Ä–µ–∑ /set üòä')
        await state.finish()

# –í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞ –¥–ª—è /get
@dp.message_handler(state=Get.login)
async def get_login(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    log = message.text
    async with state.proxy() as data:
        service = data['service']

    # –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –ø–∞—Ä–æ–ª–µ
    entry = session.query(Passwords).filter_by(service=service, login=log, user_id=user_id).first()
    if entry:
        password = await decode(entry.ciphertext, entry.tag, entry.nonce)
        answer = await message.answer(f'–ü–∞—Ä–æ–ª—å –æ—Ç —Å–µ—Ä–≤–∏—Å–∞: `{password.decode("utf-8")}`', parse_mode="MarkdownV2")
        await state.finish()
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await asyncio.sleep(5)
        await answer.delete()
    else:
        await message.answer('–õ–æ–≥–∏–Ω –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, —Å–ø–µ—Ä–≤–∞ –¥–æ–±–∞–≤—å –µ–≥–æ —á–µ—Ä–µ–∑ /set üòä')
        await state.finish()



@dp.message_handler(commands=['del'])
async def cmd_del(message: types.Message):
    await Del.service.set()
    await message.answer('–ü–∞—Ä–æ–ª—å –æ—Ç –∫–∞–∫–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —É–¥–∞–ª—è–µ–º? üò≠')

# –í–≤–æ–¥ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è /del
@dp.message_handler(state=Del.service)
async def del_service(message: types.Message, state: FSMContext):
    service = message.text
    user_id = message.from_user.id
    async with state.proxy() as data:
        data['service'] = service

    # –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –ø–∞—Ä–æ–ª–µ
    entry = session.query(Passwords).filter_by(service=service, user_id=user_id).first()
    if entry:
        await Del.login.set()
        await message.answer('–ê –ª–æ–≥–∏–Ω –∫–∞–∫–æ–π? ü§î')
    else:
        await state.finish()
        await message.answer('–°–µ—Ä–≤–∏—Å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, —Å–ø–µ—Ä–≤–∞ –¥–æ–±–∞–≤—å –µ–≥–æ —á–µ—Ä–µ–∑ /set üòä')

# –í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞ –¥–ª—è /del
@dp.message_handler(state=Del.login)
async def del_login(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        service = data['service']
    user_id = message.from_user.id
    log = message.text

    entry = session.query(Passwords).filter_by(service=service, login=log,user_id=user_id).first()
    if entry:
        session.delete(entry)
        session.commit()
        await message.answer('–ü–∞—Ä–æ–ª—å —É–¥–∞–ª—ë–Ωü´•')
    else:
        await message.answer('–õ–æ–≥–∏–Ω –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, —Å–ø–µ—Ä–≤–∞ –¥–æ–±–∞–≤—å –µ–≥–æ —á–µ—Ä–µ–∑ /set üòä')
    await state.finish()


@dp.message_handler(commands=['list'])
async def cmd_list(message: types.Message):
    user_id = message.from_user.id
    services = [i.service for i in session.query(Passwords).filter_by(user_id=user_id).all()]
    entries = {}
    for i in services:
        query = session.query(Passwords).filter_by(user_id=user_id, service=i).all()
        entries[i] = [i.login for i in query]
    entr = [f'ü´É {j}:' + '\n    üëÅÔ∏è ' + '\n    üëÅÔ∏è '.join(k) for j, k in entries.items()]
    if entr:
        await message.answer('–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:\n' + '\n'.join(entr))
    else:
        await message.answer('–¢—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è üò≠')


if  __name__ == '__main__':
    Base.metadata.create_all(engine)
    executor.start_polling(dp)
